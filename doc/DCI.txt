DCI.txt
-----------------------------------------------------------

This document explains the differences between standard
MVC web development and DCI MVC web development. 

	1 - Brief overview of MVC
	2 - Brief overview of DCI
	3 - Differences between MVC and DCI
	4 - Using DCI
	5 - Examples
	
-----------------------------------------------------------
1 - Brief overview of MVC

MVC stands for Model-View-Controller.  If you've never used
MVC to create a web application, then Wax might not be the 
best place to start.  If you have experience with MVC, keep
reading.

Models - The data portion
	Models contain the logic for manipulating, fetching,
	and handling data in general.  Models are the layer
	between the database and the browser that allows for
	modification of data before it goes into or comes out
	of the database.
	
Views - The interface portion
	Views in MVC are identical to views in DCI.  They are
	responsible for defining HTML for a given model or
	controller and for the actions they perform.
	
Controllers - Interface to views
	Controllers in MVC define what should be returned to 
	the user.  They query models and render views.
	
-----------------------------------------------------------
2 - Brief overview of DCI

DCI stands for Data-Context-Interaction.  DCI is a way to 
aggregate different functionality into a single object, 
allowing for a highly customizable network of runtime
objects.

Data - The 'Model' part of DCI
	The Data portion of DCI represents objects that handle
	data.  Data classes are very similar to MVC model
	classes-- they query databases, they write files, etc.
	
Context - The 'Controller' part of DCI
	Contexts define which actions happen when.  In Wax, 
	contexts are implemented as controllers for simplicity,
	but a context is really a term for code that ties 
	together roles to create some sort of functionality.

Interaction - Unique to DCI
	Interaction does not correlate to anything in MVC.  
	It specifies the relations between roles and how
	those relations come together to create a working
	system.  Objects in DCI have no idea what they 
	are actually capable of doing until runtime.  This
	runtime network specifies the Interaction of DCI.
	
For more information on DCI, check out these referenes:

	http://www.artima.com/articles/dci_vision.html
	http://folk.uio.no/trygver/2008/commonsense.pdf
	
-----------------------------------------------------------
3 - Differences between MVC and DCI

This section explains to an MVC programmer how to write
"MVC" style apps in DCI.  


RESOURCES.txt
-----------------------------------------------------------
The resources.wax is the default wax block that's used to 
store application assets and resources such as images,
stylesheets, scripts, etc.

This document shows an example of a resource block 
directory structure that contains every possible type of 
resource including:

	- an external PHP library
	- some images
	- a stylesheet
	- a script library
	- some roles for accessing the app
	- a few tests
	- an index view for the app
	
/resources.wax
	/lib
		phpMailer/
			pop3.class.php
			smtp.class.php
		class.phpMailer.php
	/images
		header.png
		banner.png
		background.png
		button_background.png
	/css
		application.css
	/js
		prototype.js
		scriptaculous/
			scriptaculous.js
			effects.js
			etc...
	/roles
		AppAPI.php
	/tests
		test_api.php
	/views
		index.view.php		
		
These resources can all be accessed programmatically by 
several different means.  The most common method to get
a block resource is to use the block object to query its
resources array:

	$block = Wax::GetBlock("resources");
	$index_view = $block->views("index");
	
* Notice the use of the ::GetBlock method instead of
* ::LoadBlock.  Wax caches loaded blocks, so using GetBlock
* will return the cached version of the object instead
* of re-initializing the block.

This example returns the filesystem path of the default
index view for the application.  The view can then be
rendered by any object which implements the View role:

	class SomeObj extends DCIObject implements View {}
	
	$ic = new SomeObj();
	echo $ic->Render($index_view,array("arg" => "val"));
	
This will cause SomeObj to create a rendering of the
index view and output it to the browser.

The same method can be used to get any other type of 
resource:

	$block->images("banner");
	$block->css("application");
	$block->js("prototype");
	$block->roles("AppAPI");
	etc.
	
Alternatively, since the resources may sometimes be 
needed outside of a block context, we can use a few
predefined functions to fetch the path.

	$banner_img = get_resource_from("images","banner","blockname");
	
This will return the banner.png from the images/ directory
of blockname.wax.  This method is generally used for
rendering resources from a view file, such as:

	<div>
		<span><img src="<?=get_resource_from('images','banner')?>" /></span>
	</div>
	
Which would cause the banner image to be displayed in the 
browser.  Notice that the 3rd argument (the blockname) is 
omitted.  If the function is called from a file located
within a block, wax will look through the parent block
for the resource by default.  So if this was the block
structure:

	/resources.wax
		/images
			banner.png
		/views
			index.view.php
			
Then within index.view.php, we could place the line:

	get_resource_from("images","banner");
	
And wax would search /resources.wax/images for an
image with a file NAME of 'banner'.  Due to the way
wax caches resources, file extensions are not 
necessary when looking up resources.  In fact, 
specifying an extension might cause wax to be unable
to locate the resource.
	